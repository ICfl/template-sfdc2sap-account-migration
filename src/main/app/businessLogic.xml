<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:sap="http://www.mulesoft.org/schema/mule/sap" 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sap http://www.mulesoft.org/schema/mule/sap/current/mule-sap.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
	<batch:job name="syncAccountsBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />
        <batch:input>
            <sfdc:query config-ref="Salesforce" query="dsql:SELECT AccountNumber, AccountSource, AnnualRevenue, BillingCity, BillingCountry, BillingPostalCode, BillingState, BillingStreet, Description, Fax, Industry, LastModifiedDate, Name, NumberOfEmployees, OwnerId, Ownership, ParentId, Phone, Rating, ShippingCity, ShippingCountry, ShippingPostalCode, ShippingState, ShippingStreet, Sic, SicDesc, Site, TickerSymbol, Type, Website FROM Account WHERE NumberOfEmployees &gt; 9000 AND (Industry = 'Education' OR  Industry = 'Government')" doc:name="query accounts for migration"/>

        </batch:input>
		<batch:process-records>
            <batch:step name="getAccountInSAP">
                <enricher source="#[payload.isEmpty() ? null : payload[0]['CustomerNumber']]" target="#[payload.CustomerNumber]" doc:name="store 'CustomerNumber' to payload" doc:description="Query customer from the SAP by a saleforce account name. The query result is stored to the 'sapCustomer' record variable to be processed/enhanced in next batch steps.">
                    <processor-chain doc:name="Processor Chain">

                        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="BAPI_CUSTOMER_FIND" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="get Customer by Name">
                            <sap:definition><![CDATA[<BAPI_CUSTOMER_FIND type="function">
	<import>
		<MAX_CNT type="field" sapType="INT">0</MAX_CNT>
		<PL_HOLD type="field" sapType="CHAR" sapLength="1">X</PL_HOLD>
	</import>
  	<tables>
  	<SELOPT_TAB type="table">
			<row id="0">
				<TABNAME type="field" sapType="CHAR" sapLength="4">KNA1</TABNAME>
				<FIELDNAME type="field" sapType="CHAR" sapLength="5">NAME1</FIELDNAME>
				<FIELDVALUE type="field" sapType="CHAR" sapLength="20">#[org.apache.commons.lang3.StringEscapeUtils.escapeXml(payload.Name.length() > 20 ? payload.Name.substring(0,20) : payload.Name)]</FIELDVALUE>
			</row>
		</SELOPT_TAB>
	</tables>
</BAPI_CUSTOMER_FIND>]]></sap:definition>

                        </sap:outbound-endpoint>
                        <dw:transform-message doc:name="BAPI_CUSTOMER_FIND to Customer">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload."BAPI_CUSTOMER_FIND".tables."RESULT_TAB".*row map 
{
	(CustomerNumber : $.CUSTOMER) when ($.CUSTOMER != "")
}
]]></dw:set-payload>
                        </dw:transform-message>

                    </processor-chain>
                </enricher>

            </batch:step>
            <batch:step name="getAccountGroupForExistingCustomer" accept-expression="payload.CustomerNumber != null">

                <enricher source="#[payload.AccountGroup]" target="#[payload.AccountGroup]" doc:name="store 'AccountGroup' to payload" doc:description="Query account group from the SAP by a customer Id. ">
                    <processor-chain doc:name="Processor Chain">
                        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="CUSTOMER_GET_KTOKD" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="get Account Group from SAP">
                            <sap:definition><![CDATA[<CUSTOMER_GET_KTOKD type="function">
	<import>
			<IV_KUNNR type="field" sapType="CHAR" sapLength="20">#[payload.CustomerNumber]</IV_KUNNR>
	</import>
</CUSTOMER_GET_KTOKD>]]></sap:definition>
                        </sap:outbound-endpoint>
                        <dw:transform-message doc:name="CUSTOMER_GET_KTOKD to AccountGroup">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
AccountGroup : payload."CUSTOMER_GET_KTOKD".export."EV_KTOKD"
]]></dw:set-payload>
                        </dw:transform-message>
                    </processor-chain>
                </enricher>


            </batch:step>
            <batch:step name="getNewCustomerNumber" accept-expression="payload.CustomerNumber == null">

                <enricher source="#[payload.CustomerNumber]" target="#[payload.CustomerNumber]" doc:name="store 'CustomerNumber' to payload" doc:description="If customer account record variable has null payload we need to create new record in SAP and ask for a customer number.">
                    <processor-chain doc:name="Processor Chain">
                        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="BAPI_CUSTOMER_GETINTNUMBER" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="get Next Customer Number from SAP">
                            <sap:definition><![CDATA[<BAPI_CUSTOMER_GETINTNUMBER type="function">
	<import>
			<ACCOUNTGROUP type="field" sapType="CHAR" sapLength="20">${sap.default.accountGroup}</ACCOUNTGROUP>
	</import>
</BAPI_CUSTOMER_GETINTNUMBER>
]]></sap:definition>
                        </sap:outbound-endpoint>
                        <dw:transform-message doc:name="BAPI_CUSTOMER_GETINTNUMBER">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	CustomerNumber : payload."BAPI_CUSTOMER_GETINTNUMBER".export.CUSTOMERID
}]]></dw:set-payload>
                        </dw:transform-message>
                    </processor-chain>
                </enricher>


            </batch:step>
			<batch:step name="upsertAccountToSAP" >
                <flow-ref name="commitAccountsFlow" doc:name="call commitAccountsFlow"/>
			</batch:step>
		</batch:process-records>
		<batch:on-complete>
			<scatter-gather doc:name="All">
				<processor-chain>
					<json:object-to-json-transformer
						doc:name="transform BatchJobInstance to JSON" />
					<logger message="Migration process has finished: #[payload]"
						level="INFO" doc:name="log 'Migration process has finished'" />
				</processor-chain>
				<processor-chain>
                    <parse-template location="email/body.html" doc:name="Parse Template"/>

					<smtp:outbound-endpoint host="${smtp.host}"
						port="${smtp.port}" user="${smtp.user}" password="${smtp.password}"
						to="${mail.to}" from="${mail.from}" subject="${mail.subject}"
						responseTimeout="10000" connector-ref="gmailConnector" doc:name="send mail" />
				</processor-chain>
			</scatter-gather>
		</batch:on-complete>
	</batch:job>
    <sub-flow name="commitAccountsFlow">
        <logger message="Accounts to update/create: #[payload]" level="INFO" doc:name="log Accounts to update/create"/>
        <dw:transform-message doc:name="Salesforce Account to DEBMAS01">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
DEBMAS01 : {
	IDOC @(BEGIN : "1") : {
		"EDI_DC40" @(SEGMENT : "1"):  {
			TABNAM      : "EDI_DC40",
			DIRECT      : "2",
			IDOCTYP     : "DEBMAS01",
			MESTYP      : "DEBMAS",
			SNDPOR      : "MULE01_LS",
			SNDPRT      : "LS",
			SNDPRN      : "MULE01_LS",
			RCVPOR      : "T90CLNT090",
			RCVPRT      : "LS",
			RCVPRN      : "T90CLNT090"
		},
		E1KNA1M @(SEGMENT : "1") : {
			//setup properties for update or create (005 for update and 009 for create)
			MSGFN       : "009"                      when (payload.CustomerNumber == null) otherwise "005",
			KUNNR       : payload.CustomerNumber,
			KTOKD       : payload.AccountGroup       when (payload.AccountGroup != null)   otherwise p('sap.default.accountGroup'),
			LAND1       : "SK",
			NAME1       : payload.Name               when ((sizeOf payload.Name) <= 20)    otherwise payload.Name[0..19],
			(ORT01      : payload.BillingCity)       when (payload.BillingCity != null),
			(PSTLZ      : payload.BillingPostalCode) when (payload.BillingPostalCode != null),
			(STRAS      : payload.BillingStreet)     when (payload.BillingStreet != null),
			(TELF1      : payload.Phone)             when (payload.Phone != null),
			(TELF       : payload.Fax)               when (payload.Fax != null),
			SPRAS       : "E",
			"SPRAS_ISO" : "EN"
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>

        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="idoc" functionName="DEBMAS01" xmlVersion="2" outputXml="true" responseTimeout="10000" doc:name="upsert Customer in SAP"/>
        <logger message="Upsert result: #[payload]" level="INFO" doc:name="log Result"/>
    </sub-flow>
    <flow name="mainFlow"  doc:description="This flow is the entry point to the Kick business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.">
        <batch:execute name="syncAccountsBatch" doc:name="trigger syncAccountsBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy" doc:description="If problems occured."/>
    </flow>

</mule>
